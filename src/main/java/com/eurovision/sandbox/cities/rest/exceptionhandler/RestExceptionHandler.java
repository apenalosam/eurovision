package com.eurovision.sandbox.cities.rest.exceptionhandler;

import com.eurovision.sandbox.cities.domain.exception.ProcessingException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.ErrorResponse;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@Slf4j
@RequiredArgsConstructor
@Order(Ordered.HIGHEST_PRECEDENCE)
@RestControllerAdvice
public class RestExceptionHandler {

    /**
     * Handles exceptions generated by the developer in order to throw them as a ResponseEntity
     * @param cause ProcessingException superclass. Any created exception should extend this
     * @return ResponseEntity of type ErrorResponse
     */
    @ExceptionHandler(ProcessingException.class)
    protected ResponseEntity<ErrorResponse> handleProcessingException(final ProcessingException cause) {

        ErrorResponse body = ErrorResponse.builder(cause, cause.getHttpStatus(), cause.getMessage())
                .typeMessageCode(cause.getTypeMessageCode())
                .detailMessageCode(cause.getMessage())
                .titleMessageCode(cause.getTitleMessageCode())
                .build();

        return ResponseEntity.status(cause.getHttpStatus()).contentType(MediaType.APPLICATION_PROBLEM_JSON).body(body);
    }

}
